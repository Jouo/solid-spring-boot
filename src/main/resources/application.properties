#########################   These are the settings for the database, I personally use the mariadb driver but
#   Database Settings   #   you can use the MySQL driver, for testing or reference purposes you can run the SQL
#########################   script that I left in the directory named "files" (which is found in the root
#                           of this project) to setup the database.

server.port=8080
spring.datasource.url=jdbc:mariadb://DATABASE_URL/solid-spring-boot?allowPublicKeyRetrieval=true
spring.datasource.username=DATABASE_USERNAME
spring.datasource.password=DATABASE_USER_PASSWORD

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimumIdle=5
spring.datasource.hikari.maximumPoolSize=20
spring.datasource.hikari.idleTimeout=10000
spring.datasource.hikari.maxLifetime=1800000
spring.datasource.hikari.connectionTimeout=5000
spring.datasource.hikari.leak-detection-threshold=2000

######################   A JWT is generated (based on the secret) upon POST requesting to /api/authentication,
#   JSON Web Token   #   which is needed to request data from any other API, you can change this behavior in:
######################   [security/SecurityConfiguration], I've setup the expiration value in hours,
#                        this value can be changed in: [security/jwt/JwtUtilityTool]

jwt.secret=ENTER_ANYTHING_HERE
jwt.expiration.hours=16

jwt.filter.malformed.message=Malformed JSON token
jwt.filter.expired.message=Expired JSON token
jwt.filter.invalid.message=Invalid request header

######################   Upon failing to authenticate, the system will flag your IP and after failing any number of
#   Authentication   #   times consecutively that IP will be temporarily banned, the default value for the temporal
######################   ban is in minutes, this can be changed in [security/listener/FailureListenerImpl]
#                        you could also implement "FailureListener" and make your own class

auth.login.attempts=5
auth.login.ban.minutes=30

auth.credentials.message=Wrong login information
auth.account.ban.message=User account is temporarily banned
auth.account.locked.message=User account is currently locked
auth.ip.ban.message=Current IP address is temporarily banned
auth.user.not.found.message=Username not found
auth.role.not.found.message=User found without roles

###################   There's no need to change the logback key value so just leave it as is, the AOP class uses
#   AOP Logging   #   LogUtilsImpl, you can implement "LogUtils" and make your own class that fits your needs,
###################   to display log messages as you wish

aop.logback.key=service
aop.default.spaces.between.fields=2

aop.null.message=Returned null
aop.empty.message=Returned an empty list

#####################   A date is shown upon returning error messages, that's the http response, the other one is
#   Date Patterns   #   used for the date field in the entities found in: [orm/entity/transaction], the date is
#####################   displayed in the logs (console and file) as human readable

http.response.date.pattern=d MMMMM yyyy, h:mm a - z
orm.entity.date.pattern=d MMM yyyy - h:mm a

############################   Default messages when throwing an HttpException found in: [rest/http/status],
#   Http Default Message   #   once thrown they will be handled by the [rest/utility/handler/HttpRequestHandler]
############################   which will return a pretty JSON to the user

http.200.message=The request has succeeded
http.400.message=The request can't be fulfilled with the data provided
http.401.message=The request requires user authentication
http.403.message=The server understood the request, but refuses to authorize it
http.404.message=The requested resource could not be found
http.405.message=The request was made using an unsupported method
http.406.message=The request made wasn't accepted
http.500.message=The server encountered an unexpected error, unable to fulfill the request